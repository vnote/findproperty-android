package com.cetnaline.findproperty.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.db.entity.RailWay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "house_menu_railway".
*/
public class RailWayDao extends AbstractDao<RailWay, Void> {

    public static final String TABLENAME = "house_menu_railway";

    /**
     * Properties of entity RailWay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RailWayID = new Property(0, Integer.class, "RailWayID", false, "RAIL_WAY_ID");
        public final static Property RailLineID = new Property(1, Integer.class, "RailLineID", false, "RAIL_LINE_ID");
        public final static Property RailWayName = new Property(2, String.class, "RailWayName", false, "RAIL_WAY_NAME");
        public final static Property Lng = new Property(3, Double.class, "Lng", false, "LNG");
        public final static Property Lat = new Property(4, Double.class, "Lat", false, "LAT");
        public final static Property BranchNum = new Property(5, String.class, "BranchNum", false, "BRANCH_NUM");
    }


    public RailWayDao(DaoConfig config) {
        super(config);
    }
    
    public RailWayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"house_menu_railway\" (" + //
                "\"RAIL_WAY_ID\" INTEGER," + // 0: RailWayID
                "\"RAIL_LINE_ID\" INTEGER," + // 1: RailLineID
                "\"RAIL_WAY_NAME\" TEXT," + // 2: RailWayName
                "\"LNG\" REAL," + // 3: Lng
                "\"LAT\" REAL," + // 4: Lat
                "\"BRANCH_NUM\" TEXT);"); // 5: BranchNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"house_menu_railway\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RailWay entity) {
        stmt.clearBindings();
 
        Integer RailWayID = entity.getRailWayID();
        if (RailWayID != null) {
            stmt.bindLong(1, RailWayID);
        }
 
        Integer RailLineID = entity.getRailLineID();
        if (RailLineID != null) {
            stmt.bindLong(2, RailLineID);
        }
 
        String RailWayName = entity.getRailWayName();
        if (RailWayName != null) {
            stmt.bindString(3, RailWayName);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(4, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(5, Lat);
        }
 
        String BranchNum = entity.getBranchNum();
        if (BranchNum != null) {
            stmt.bindString(6, BranchNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RailWay entity) {
        stmt.clearBindings();
 
        Integer RailWayID = entity.getRailWayID();
        if (RailWayID != null) {
            stmt.bindLong(1, RailWayID);
        }
 
        Integer RailLineID = entity.getRailLineID();
        if (RailLineID != null) {
            stmt.bindLong(2, RailLineID);
        }
 
        String RailWayName = entity.getRailWayName();
        if (RailWayName != null) {
            stmt.bindString(3, RailWayName);
        }
 
        Double Lng = entity.getLng();
        if (Lng != null) {
            stmt.bindDouble(4, Lng);
        }
 
        Double Lat = entity.getLat();
        if (Lat != null) {
            stmt.bindDouble(5, Lat);
        }
 
        String BranchNum = entity.getBranchNum();
        if (BranchNum != null) {
            stmt.bindString(6, BranchNum);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RailWay readEntity(Cursor cursor, int offset) {
        RailWay entity = new RailWay( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // RailWayID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // RailLineID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RailWayName
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Lng
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // BranchNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RailWay entity, int offset) {
        entity.setRailWayID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setRailLineID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRailWayName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLng(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setBranchNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RailWay entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RailWay entity) {
        return null;
    }

    @Override
    public boolean hasKey(RailWay entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
