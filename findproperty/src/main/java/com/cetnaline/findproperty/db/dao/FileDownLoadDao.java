package com.cetnaline.findproperty.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.db.entity.FileDownLoad;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "house_file_download".
*/
public class FileDownLoadDao extends AbstractDao<FileDownLoad, Long> {

    public static final String TABLENAME = "house_file_download";

    /**
     * Properties of entity FileDownLoad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownPath = new Property(1, String.class, "downPath", false, "DOWN_PATH");
        public final static Property DownloadLength = new Property(2, Integer.class, "downloadLength", false, "DOWNLOAD_LENGTH");
        public final static Property ThreadId = new Property(3, Integer.class, "threadId", false, "THREAD_ID");
        public final static Property ModifiedSince = new Property(4, String.class, "modifiedSince", false, "MODIFIED_SINCE");
    }


    public FileDownLoadDao(DaoConfig config) {
        super(config);
    }
    
    public FileDownLoadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"house_file_download\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWN_PATH\" TEXT," + // 1: downPath
                "\"DOWNLOAD_LENGTH\" INTEGER," + // 2: downloadLength
                "\"THREAD_ID\" INTEGER," + // 3: threadId
                "\"MODIFIED_SINCE\" TEXT);"); // 4: modifiedSince
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"house_file_download\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileDownLoad entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downPath = entity.getDownPath();
        if (downPath != null) {
            stmt.bindString(2, downPath);
        }
 
        Integer downloadLength = entity.getDownloadLength();
        if (downloadLength != null) {
            stmt.bindLong(3, downloadLength);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(4, threadId);
        }
 
        String modifiedSince = entity.getModifiedSince();
        if (modifiedSince != null) {
            stmt.bindString(5, modifiedSince);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileDownLoad entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downPath = entity.getDownPath();
        if (downPath != null) {
            stmt.bindString(2, downPath);
        }
 
        Integer downloadLength = entity.getDownloadLength();
        if (downloadLength != null) {
            stmt.bindLong(3, downloadLength);
        }
 
        Integer threadId = entity.getThreadId();
        if (threadId != null) {
            stmt.bindLong(4, threadId);
        }
 
        String modifiedSince = entity.getModifiedSince();
        if (modifiedSince != null) {
            stmt.bindString(5, modifiedSince);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileDownLoad readEntity(Cursor cursor, int offset) {
        FileDownLoad entity = new FileDownLoad( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downPath
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // downloadLength
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // threadId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // modifiedSince
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileDownLoad entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadLength(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setThreadId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setModifiedSince(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileDownLoad entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileDownLoad entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileDownLoad entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
