package com.cetnaline.findproperty.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.db.entity.Staff;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "house_staff".
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "house_staff";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UId = new Property(1, String.class, "uId", false, "U_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property DepartmentName = new Property(4, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Staff400Tel = new Property(6, String.class, "staff400Tel", false, "STAFF400_TEL");
        public final static Property ServiceEstates = new Property(7, String.class, "serviceEstates", false, "SERVICE_ESTATES");
        public final static Property StaffRemark = new Property(8, String.class, "staffRemark", false, "STAFF_REMARK");
    }


    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"house_staff\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"U_ID\" TEXT NOT NULL ," + // 1: uId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"DEPARTMENT_NAME\" TEXT," + // 4: departmentName
                "\"MOBILE\" TEXT NOT NULL ," + // 5: mobile
                "\"STAFF400_TEL\" TEXT," + // 6: staff400Tel
                "\"SERVICE_ESTATES\" TEXT," + // 7: serviceEstates
                "\"STAFF_REMARK\" TEXT);"); // 8: staffRemark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"house_staff\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUId());
        stmt.bindString(3, entity.getName());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(5, departmentName);
        }
        stmt.bindString(6, entity.getMobile());
 
        String staff400Tel = entity.getStaff400Tel();
        if (staff400Tel != null) {
            stmt.bindString(7, staff400Tel);
        }
 
        String serviceEstates = entity.getServiceEstates();
        if (serviceEstates != null) {
            stmt.bindString(8, serviceEstates);
        }
 
        String staffRemark = entity.getStaffRemark();
        if (staffRemark != null) {
            stmt.bindString(9, staffRemark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUId());
        stmt.bindString(3, entity.getName());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(5, departmentName);
        }
        stmt.bindString(6, entity.getMobile());
 
        String staff400Tel = entity.getStaff400Tel();
        if (staff400Tel != null) {
            stmt.bindString(7, staff400Tel);
        }
 
        String serviceEstates = entity.getServiceEstates();
        if (serviceEstates != null) {
            stmt.bindString(8, serviceEstates);
        }
 
        String staffRemark = entity.getStaffRemark();
        if (staffRemark != null) {
            stmt.bindString(9, staffRemark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departmentName
            cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // staff400Tel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // serviceEstates
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // staffRemark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.getString(offset + 5));
        entity.setStaff400Tel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServiceEstates(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStaffRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Staff entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
