package com.cetnaline.findproperty.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.db.entity.DropBo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "house_menu_drop".
*/
public class DropBoDao extends AbstractDao<DropBo, Void> {

    public static final String TABLENAME = "house_menu_drop";

    /**
     * Properties of entity DropBo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, Integer.class, "type", false, "TYPE");
        public final static Property ID = new Property(1, Integer.class, "ID", false, "ID");
        public final static Property Value = new Property(2, String.class, "Value", false, "VALUE");
        public final static Property Text = new Property(3, String.class, "Text", false, "TEXT");
        public final static Property Name = new Property(4, String.class, "Name", false, "NAME");
        public final static Property Para = new Property(5, String.class, "Para", false, "PARA");
        public final static Property Key = new Property(6, String.class, "key", false, "KEY");
    }


    public DropBoDao(DaoConfig config) {
        super(config);
    }
    
    public DropBoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"house_menu_drop\" (" + //
                "\"TYPE\" INTEGER," + // 0: type
                "\"ID\" INTEGER," + // 1: ID
                "\"VALUE\" TEXT," + // 2: Value
                "\"TEXT\" TEXT," + // 3: Text
                "\"NAME\" TEXT," + // 4: Name
                "\"PARA\" TEXT," + // 5: Para
                "\"KEY\" TEXT);"); // 6: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"house_menu_drop\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DropBo entity) {
        stmt.clearBindings();
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(1, type);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(3, Value);
        }
 
        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(4, Text);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(5, Name);
        }
 
        String Para = entity.getPara();
        if (Para != null) {
            stmt.bindString(6, Para);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(7, key);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DropBo entity) {
        stmt.clearBindings();
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(1, type);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(3, Value);
        }
 
        String Text = entity.getText();
        if (Text != null) {
            stmt.bindString(4, Text);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(5, Name);
        }
 
        String Para = entity.getPara();
        if (Para != null) {
            stmt.bindString(6, Para);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(7, key);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DropBo readEntity(Cursor cursor, int offset) {
        DropBo entity = new DropBo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Value
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Para
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DropBo entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPara(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DropBo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DropBo entity) {
        return null;
    }

    @Override
    public boolean hasKey(DropBo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
