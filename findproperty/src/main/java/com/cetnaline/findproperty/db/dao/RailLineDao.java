package com.cetnaline.findproperty.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cetnaline.findproperty.db.entity.RailLine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "house_menu_railline".
*/
public class RailLineDao extends AbstractDao<RailLine, Void> {

    public static final String TABLENAME = "house_menu_railline";

    /**
     * Properties of entity RailLine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RailLineID = new Property(0, Integer.class, "RailLineID", false, "RAIL_LINE_ID");
        public final static Property RailLineName = new Property(1, String.class, "RailLineName", false, "RAIL_LINE_NAME");
        public final static Property OrderBy = new Property(2, Integer.class, "OrderBy", false, "ORDER_BY");
    }


    public RailLineDao(DaoConfig config) {
        super(config);
    }
    
    public RailLineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"house_menu_railline\" (" + //
                "\"RAIL_LINE_ID\" INTEGER," + // 0: RailLineID
                "\"RAIL_LINE_NAME\" TEXT," + // 1: RailLineName
                "\"ORDER_BY\" INTEGER);"); // 2: OrderBy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"house_menu_railline\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RailLine entity) {
        stmt.clearBindings();
 
        Integer RailLineID = entity.getRailLineID();
        if (RailLineID != null) {
            stmt.bindLong(1, RailLineID);
        }
 
        String RailLineName = entity.getRailLineName();
        if (RailLineName != null) {
            stmt.bindString(2, RailLineName);
        }
 
        Integer OrderBy = entity.getOrderBy();
        if (OrderBy != null) {
            stmt.bindLong(3, OrderBy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RailLine entity) {
        stmt.clearBindings();
 
        Integer RailLineID = entity.getRailLineID();
        if (RailLineID != null) {
            stmt.bindLong(1, RailLineID);
        }
 
        String RailLineName = entity.getRailLineName();
        if (RailLineName != null) {
            stmt.bindString(2, RailLineName);
        }
 
        Integer OrderBy = entity.getOrderBy();
        if (OrderBy != null) {
            stmt.bindLong(3, OrderBy);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RailLine readEntity(Cursor cursor, int offset) {
        RailLine entity = new RailLine( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // RailLineID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RailLineName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // OrderBy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RailLine entity, int offset) {
        entity.setRailLineID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setRailLineName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderBy(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RailLine entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RailLine entity) {
        return null;
    }

    @Override
    public boolean hasKey(RailLine entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
